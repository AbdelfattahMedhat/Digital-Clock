
Digital Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000af0  00000b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  008000a0  008000a0  00000bc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002237  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd8  00000000  00000000  000030ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f7  00000000  00000000  00003ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00004fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e03  00000000  00000000  0000555c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000107d  00000000  00000000  0000635f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  000073dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_6>
  1c:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_7>
  20:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_8>
  24:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3d       	cpi	r26, 0xD3	; 211
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8a:	0c 94 76 05 	jmp	0xaec	; 0xaec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <buttons_init>:
static button_status_t buttons_s[BUTTON_MAX]; // array of buttons to store status of each button
static u8 button_counter[BUTTON_MAX]={0};		 


void buttons_init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	for(int i=0;i<BUTTON_MAX;i++)
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	0b c0       	rjmp	.+22     	; 0xb2 <buttons_init+0x20>
	{
		DIO_InitPin(FIRST_BUTTON+i,INPULL);
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	8c 2f       	mov	r24, r28
  a0:	80 5f       	subi	r24, 0xF0	; 240
  a2:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_InitPin>
		buttons_s[i] = UNPRESSED;
  a6:	fe 01       	movw	r30, r28
  a8:	ed 55       	subi	r30, 0x5D	; 93
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
static u8 button_counter[BUTTON_MAX]={0};		 


void buttons_init(void)
{
	for(int i=0;i<BUTTON_MAX;i++)
  b0:	21 96       	adiw	r28, 0x01	; 1
  b2:	c3 30       	cpi	r28, 0x03	; 3
  b4:	d1 05       	cpc	r29, r1
  b6:	94 f3       	brlt	.-28     	; 0x9c <buttons_init+0xa>
	{
		DIO_InitPin(FIRST_BUTTON+i,INPULL);
		buttons_s[i] = UNPRESSED;
	}
}
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <buttons_getter>:
button_status_t buttons_getter(button_t button) // to get state of needed button
{
	button_status_t state = buttons_s[button];
  be:	e8 2f       	mov	r30, r24
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	ed 55       	subi	r30, 0x5D	; 93
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	80 81       	ld	r24, Z
	buttons_s[button] = UNPRESSED;
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	90 83       	st	Z, r25
	return state;
}
  cc:	08 95       	ret

000000ce <button_periodic_check>:

void button_periodic_check(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	for(int i=0;i<BUTTON_MAX;i++)
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	26 c0       	rjmp	.+76     	; 0x124 <button_periodic_check+0x56>
	{
		if(buttons_s[i] == UNPRESSED)
  d8:	fe 01       	movw	r30, r28
  da:	ed 55       	subi	r30, 0x5D	; 93
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	80 81       	ld	r24, Z
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	f9 f4       	brne	.+62     	; 0x122 <button_periodic_check+0x54>
		{
			if(DIO_ReadPin(FIRST_BUTTON+i) == PRESSED)
  e4:	8c 2f       	mov	r24, r28
  e6:	80 5f       	subi	r24, 0xF0	; 240
  e8:	0e 94 b1 02 	call	0x562	; 0x562 <DIO_ReadPin>
  ec:	81 11       	cpse	r24, r1
  ee:	07 c0       	rjmp	.+14     	; 0xfe <button_periodic_check+0x30>
			button_counter[i]+=1;
  f0:	fe 01       	movw	r30, r28
  f2:	e0 56       	subi	r30, 0x60	; 96
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	80 81       	ld	r24, Z
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 83       	st	Z, r24
  fc:	04 c0       	rjmp	.+8      	; 0x106 <button_periodic_check+0x38>
			else
			button_counter[i]=0;
  fe:	fe 01       	movw	r30, r28
 100:	e0 56       	subi	r30, 0x60	; 96
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	10 82       	st	Z, r1
			if(button_counter[i]>=SAMPLES_NUM)
 106:	fe 01       	movw	r30, r28
 108:	e0 56       	subi	r30, 0x60	; 96
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	86 39       	cpi	r24, 0x96	; 150
 110:	40 f0       	brcs	.+16     	; 0x122 <button_periodic_check+0x54>
			{
				button_counter[i]=0;
 112:	fe 01       	movw	r30, r28
 114:	e0 56       	subi	r30, 0x60	; 96
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	10 82       	st	Z, r1
				buttons_s[i]=PRESSED;
 11a:	fe 01       	movw	r30, r28
 11c:	ed 55       	subi	r30, 0x5D	; 93
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	10 82       	st	Z, r1
	return state;
}

void button_periodic_check(void)
{
	for(int i=0;i<BUTTON_MAX;i++)
 122:	21 96       	adiw	r28, 0x01	; 1
 124:	c3 30       	cpi	r28, 0x03	; 3
 126:	d1 05       	cpc	r29, r1
 128:	bc f2       	brlt	.-82     	; 0xd8 <button_periodic_check+0xa>
			}
		}
		
	}
	
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <display_time>:
static u8 counter = 0;


void display_time(void)
{
	counter++;
 130:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <counter>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <counter>
	switch(counter)
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	21 f1       	breq	.+72     	; 0x186 <display_time+0x56>
 13e:	18 f4       	brcc	.+6      	; 0x146 <display_time+0x16>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	39 f0       	breq	.+14     	; 0x152 <display_time+0x22>
 144:	08 95       	ret
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	91 f1       	breq	.+100    	; 0x1ae <display_time+0x7e>
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	09 f4       	brne	.+2      	; 0x150 <display_time+0x20>
 14e:	49 c0       	rjmp	.+146    	; 0x1e2 <display_time+0xb2>
 150:	08 95       	ret
	{
		case 1 :
		DIO_WritePin(MIN_TENS,LOW);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_WritePin>
		DIO_WritePin(MIN_UNITS,HIGH);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_WritePin>
		seven_segment_write_number(minutes%10);
 162:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <minutes>
 166:	9d ec       	ldi	r25, 0xCD	; 205
 168:	89 9f       	mul	r24, r25
 16a:	91 2d       	mov	r25, r1
 16c:	11 24       	eor	r1, r1
 16e:	96 95       	lsr	r25
 170:	96 95       	lsr	r25
 172:	96 95       	lsr	r25
 174:	99 0f       	add	r25, r25
 176:	29 2f       	mov	r18, r25
 178:	22 0f       	add	r18, r18
 17a:	22 0f       	add	r18, r18
 17c:	92 0f       	add	r25, r18
 17e:	89 1b       	sub	r24, r25
 180:	0e 94 0c 01 	call	0x218	; 0x218 <seven_segment_write_number>
		break;
 184:	08 95       	ret
		case 2 :
		DIO_WritePin(MIN_UNITS,LOW);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_WritePin>
		DIO_WritePin(MIN_TENS,HIGH);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_WritePin>
		seven_segment_write_number(minutes/10);
 196:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <minutes>
 19a:	9d ec       	ldi	r25, 0xCD	; 205
 19c:	89 9f       	mul	r24, r25
 19e:	81 2d       	mov	r24, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	86 95       	lsr	r24
 1a4:	86 95       	lsr	r24
 1a6:	86 95       	lsr	r24
 1a8:	0e 94 0c 01 	call	0x218	; 0x218 <seven_segment_write_number>
		break;
 1ac:	08 95       	ret
		case 3 :
		DIO_WritePin(SEC_TENS,LOW);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	87 e0       	ldi	r24, 0x07	; 7
 1b2:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_WritePin>
		DIO_WritePin(SEC_UNITS,HIGH);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_WritePin>
		seven_segment_write_number(seconds%10);
 1be:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <seconds>
 1c2:	9d ec       	ldi	r25, 0xCD	; 205
 1c4:	89 9f       	mul	r24, r25
 1c6:	91 2d       	mov	r25, r1
 1c8:	11 24       	eor	r1, r1
 1ca:	96 95       	lsr	r25
 1cc:	96 95       	lsr	r25
 1ce:	96 95       	lsr	r25
 1d0:	99 0f       	add	r25, r25
 1d2:	29 2f       	mov	r18, r25
 1d4:	22 0f       	add	r18, r18
 1d6:	22 0f       	add	r18, r18
 1d8:	92 0f       	add	r25, r18
 1da:	89 1b       	sub	r24, r25
 1dc:	0e 94 0c 01 	call	0x218	; 0x218 <seven_segment_write_number>
		break;
 1e0:	08 95       	ret
		case 4 :
		DIO_WritePin(SEC_UNITS,LOW);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_WritePin>
		DIO_WritePin(SEC_TENS,HIGH);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	87 e0       	ldi	r24, 0x07	; 7
 1ee:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_WritePin>
		seven_segment_write_number(seconds/10);
 1f2:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <seconds>
 1f6:	9d ec       	ldi	r25, 0xCD	; 205
 1f8:	89 9f       	mul	r24, r25
 1fa:	81 2d       	mov	r24, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	86 95       	lsr	r24
 200:	86 95       	lsr	r24
 202:	86 95       	lsr	r24
 204:	0e 94 0c 01 	call	0x218	; 0x218 <seven_segment_write_number>
		counter = 0;
 208:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <counter>
 20c:	08 95       	ret

0000020e <time_setter>:
	}
}

void time_setter(u8 second,u8 minute)
{
	seconds = second;
 20e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <seconds>
	minutes = minute;
 212:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <minutes>
 216:	08 95       	ret

00000218 <seven_segment_write_number>:

#include "seven_segment.h"

void seven_segment_write_number(u8 number)
{
	DIO_WritePort(SEVEN_SEGMENT_PORT,~seven_seg_char[number]);
 218:	e8 2f       	mov	r30, r24
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	60 81       	ld	r22, Z
 222:	60 95       	com	r22
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_WritePort>
 22a:	08 95       	ret

0000022c <main>:
#include "shaduler.h"


int main(void)
{
	DIO_Init();
 22c:	0e 94 1c 02 	call	0x438	; 0x438 <DIO_Init>
	buttons_init();
 230:	0e 94 49 00 	call	0x92	; 0x92 <buttons_init>
	schaduler_init();
 234:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <schaduler_init>
    /* Replace with your application code */
    while (1) 
    {
		OS_run();
 238:	0e 94 65 05 	call	0xaca	; 0xaca <OS_run>
 23c:	fd cf       	rjmp	.-6      	; 0x238 <main+0xc>

0000023e <DIO_InitPin>:
	 		DIO_InitPin(i,PinsStatusArray[i]);
		}
}
void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
	u8 port=pin/PORT_SIZE;
 23e:	98 2f       	mov	r25, r24
 240:	96 95       	lsr	r25
 242:	96 95       	lsr	r25
 244:	96 95       	lsr	r25
	u8 pin_num = pin%PORT_SIZE;
 246:	87 70       	andi	r24, 0x07	; 7
	switch(status)
 248:	61 30       	cpi	r22, 0x01	; 1
 24a:	09 f4       	brne	.+2      	; 0x24e <DIO_InitPin+0x10>
 24c:	55 c0       	rjmp	.+170    	; 0x2f8 <DIO_InitPin+0xba>
 24e:	20 f0       	brcs	.+8      	; 0x258 <DIO_InitPin+0x1a>
 250:	62 30       	cpi	r22, 0x02	; 2
 252:	09 f4       	brne	.+2      	; 0x256 <DIO_InitPin+0x18>
 254:	a1 c0       	rjmp	.+322    	; 0x398 <DIO_InitPin+0x15a>
 256:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	c1 f0       	breq	.+48     	; 0x28c <DIO_InitPin+0x4e>
 25c:	28 f0       	brcs	.+10     	; 0x268 <DIO_InitPin+0x2a>
 25e:	92 30       	cpi	r25, 0x02	; 2
 260:	39 f1       	breq	.+78     	; 0x2b0 <DIO_InitPin+0x72>
 262:	93 30       	cpi	r25, 0x03	; 3
 264:	b9 f1       	breq	.+110    	; 0x2d4 <DIO_InitPin+0x96>
 266:	08 95       	ret
		{
			case PA:
			SET_BIT( DDRA,pin_num);
 268:	4a b3       	in	r20, 0x1a	; 26
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	b9 01       	movw	r22, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_InitPin+0x38>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	8a 95       	dec	r24
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_InitPin+0x34>
 27a:	cb 01       	movw	r24, r22
 27c:	94 2f       	mov	r25, r20
 27e:	98 2b       	or	r25, r24
 280:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
 282:	9b b3       	in	r25, 0x1b	; 27
 284:	80 95       	com	r24
 286:	89 23       	and	r24, r25
 288:	8b bb       	out	0x1b, r24	; 27
			break;
 28a:	08 95       	ret
			case PB:
			SET_BIT( DDRB,pin_num);
 28c:	47 b3       	in	r20, 0x17	; 23
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	b9 01       	movw	r22, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_InitPin+0x5c>
 296:	66 0f       	add	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	8a 95       	dec	r24
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_InitPin+0x58>
 29e:	cb 01       	movw	r24, r22
 2a0:	94 2f       	mov	r25, r20
 2a2:	98 2b       	or	r25, r24
 2a4:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
 2a6:	98 b3       	in	r25, 0x18	; 24
 2a8:	80 95       	com	r24
 2aa:	89 23       	and	r24, r25
 2ac:	88 bb       	out	0x18, r24	; 24
			break;
 2ae:	08 95       	ret
			case PC:
			SET_BIT( DDRC,pin_num);
 2b0:	44 b3       	in	r20, 0x14	; 20
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	b9 01       	movw	r22, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_InitPin+0x80>
 2ba:	66 0f       	add	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	8a 95       	dec	r24
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_InitPin+0x7c>
 2c2:	cb 01       	movw	r24, r22
 2c4:	94 2f       	mov	r25, r20
 2c6:	98 2b       	or	r25, r24
 2c8:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
 2ca:	95 b3       	in	r25, 0x15	; 21
 2cc:	80 95       	com	r24
 2ce:	89 23       	and	r24, r25
 2d0:	85 bb       	out	0x15, r24	; 21
			break;
 2d2:	08 95       	ret
			case PD:
			SET_BIT( DDRD,pin_num);
 2d4:	41 b3       	in	r20, 0x11	; 17
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_InitPin+0xa4>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	8a 95       	dec	r24
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_InitPin+0xa0>
 2e6:	cb 01       	movw	r24, r22
 2e8:	94 2f       	mov	r25, r20
 2ea:	98 2b       	or	r25, r24
 2ec:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
 2ee:	92 b3       	in	r25, 0x12	; 18
 2f0:	80 95       	com	r24
 2f2:	89 23       	and	r24, r25
 2f4:	82 bb       	out	0x12, r24	; 18
			break;		
 2f6:	08 95       	ret
		}
		break;
		case INFREE:
		switch(pin/8)
 2f8:	91 30       	cpi	r25, 0x01	; 1
 2fa:	c1 f0       	breq	.+48     	; 0x32c <DIO_InitPin+0xee>
 2fc:	28 f0       	brcs	.+10     	; 0x308 <DIO_InitPin+0xca>
 2fe:	92 30       	cpi	r25, 0x02	; 2
 300:	39 f1       	breq	.+78     	; 0x350 <DIO_InitPin+0x112>
 302:	93 30       	cpi	r25, 0x03	; 3
 304:	b9 f1       	breq	.+110    	; 0x374 <DIO_InitPin+0x136>
 306:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
 308:	4a b3       	in	r20, 0x1a	; 26
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_InitPin+0xd8>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_InitPin+0xd4>
 31a:	cb 01       	movw	r24, r22
 31c:	80 95       	com	r24
 31e:	94 2f       	mov	r25, r20
 320:	98 23       	and	r25, r24
 322:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pin_num);
 324:	9b b3       	in	r25, 0x1b	; 27
 326:	89 23       	and	r24, r25
 328:	8b bb       	out	0x1b, r24	; 27
			break;
 32a:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
 32c:	47 b3       	in	r20, 0x17	; 23
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	b9 01       	movw	r22, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_InitPin+0xfc>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	8a 95       	dec	r24
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_InitPin+0xf8>
 33e:	cb 01       	movw	r24, r22
 340:	80 95       	com	r24
 342:	94 2f       	mov	r25, r20
 344:	98 23       	and	r25, r24
 346:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pin_num);
 348:	98 b3       	in	r25, 0x18	; 24
 34a:	89 23       	and	r24, r25
 34c:	88 bb       	out	0x18, r24	; 24
			break;
 34e:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
 350:	44 b3       	in	r20, 0x14	; 20
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_InitPin+0x120>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	8a 95       	dec	r24
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_InitPin+0x11c>
 362:	cb 01       	movw	r24, r22
 364:	80 95       	com	r24
 366:	94 2f       	mov	r25, r20
 368:	98 23       	and	r25, r24
 36a:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pin_num);
 36c:	95 b3       	in	r25, 0x15	; 21
 36e:	89 23       	and	r24, r25
 370:	85 bb       	out	0x15, r24	; 21
			break;
 372:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
 374:	41 b3       	in	r20, 0x11	; 17
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	b9 01       	movw	r22, r18
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_InitPin+0x144>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	8a 95       	dec	r24
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_InitPin+0x140>
 386:	cb 01       	movw	r24, r22
 388:	80 95       	com	r24
 38a:	94 2f       	mov	r25, r20
 38c:	98 23       	and	r25, r24
 38e:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pin_num);
 390:	92 b3       	in	r25, 0x12	; 18
 392:	89 23       	and	r24, r25
 394:	82 bb       	out	0x12, r24	; 18
			break;
 396:	08 95       	ret
		}
		break;
		
		case INPULL:
		switch(port)
 398:	91 30       	cpi	r25, 0x01	; 1
 39a:	c1 f0       	breq	.+48     	; 0x3cc <DIO_InitPin+0x18e>
 39c:	28 f0       	brcs	.+10     	; 0x3a8 <DIO_InitPin+0x16a>
 39e:	92 30       	cpi	r25, 0x02	; 2
 3a0:	39 f1       	breq	.+78     	; 0x3f0 <DIO_InitPin+0x1b2>
 3a2:	93 30       	cpi	r25, 0x03	; 3
 3a4:	b9 f1       	breq	.+110    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3a6:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
 3a8:	4a b3       	in	r20, 0x1a	; 26
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	b9 01       	movw	r22, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_InitPin+0x178>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	8a 95       	dec	r24
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_InitPin+0x174>
 3ba:	cb 01       	movw	r24, r22
 3bc:	96 2f       	mov	r25, r22
 3be:	90 95       	com	r25
 3c0:	94 23       	and	r25, r20
 3c2:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
 3c4:	9b b3       	in	r25, 0x1b	; 27
 3c6:	89 2b       	or	r24, r25
 3c8:	8b bb       	out	0x1b, r24	; 27
			break;
 3ca:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pin_num);
 3cc:	47 b3       	in	r20, 0x17	; 23
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	b9 01       	movw	r22, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_InitPin+0x19c>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	8a 95       	dec	r24
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_InitPin+0x198>
 3de:	cb 01       	movw	r24, r22
 3e0:	96 2f       	mov	r25, r22
 3e2:	90 95       	com	r25
 3e4:	94 23       	and	r25, r20
 3e6:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
 3e8:	98 b3       	in	r25, 0x18	; 24
 3ea:	89 2b       	or	r24, r25
 3ec:	88 bb       	out	0x18, r24	; 24
			break;
 3ee:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pin_num);
 3f0:	44 b3       	in	r20, 0x14	; 20
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	b9 01       	movw	r22, r18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_InitPin+0x1c0>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	8a 95       	dec	r24
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_InitPin+0x1bc>
 402:	cb 01       	movw	r24, r22
 404:	96 2f       	mov	r25, r22
 406:	90 95       	com	r25
 408:	94 23       	and	r25, r20
 40a:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
 40c:	95 b3       	in	r25, 0x15	; 21
 40e:	89 2b       	or	r24, r25
 410:	85 bb       	out	0x15, r24	; 21
			break;
 412:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pin_num);
 414:	41 b3       	in	r20, 0x11	; 17
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	b9 01       	movw	r22, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	8a 95       	dec	r24
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	cb 01       	movw	r24, r22
 428:	96 2f       	mov	r25, r22
 42a:	90 95       	com	r25
 42c:	94 23       	and	r25, r20
 42e:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
 430:	92 b3       	in	r25, 0x12	; 18
 432:	89 2b       	or	r24, r25
 434:	82 bb       	out	0x12, r24	; 18
 436:	08 95       	ret

00000438 <DIO_Init>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#define PORT_SIZE 8   //bits number in ports

void DIO_Init(void)
{
 438:	cf 93       	push	r28
		DIO_Pin_type i;
	 	for (i=PINA0;i<TOTAL_PINS;i++)
 43a:	c0 e0       	ldi	r28, 0x00	; 0
 43c:	09 c0       	rjmp	.+18     	; 0x450 <DIO_Init+0x18>
		{
	 		DIO_InitPin(i,PinsStatusArray[i]);
 43e:	ec 2f       	mov	r30, r28
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	e0 59       	subi	r30, 0x90	; 144
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	60 81       	ld	r22, Z
 448:	8c 2f       	mov	r24, r28
 44a:	0e 94 1f 01 	call	0x23e	; 0x23e <DIO_InitPin>
#define PORT_SIZE 8   //bits number in ports

void DIO_Init(void)
{
		DIO_Pin_type i;
	 	for (i=PINA0;i<TOTAL_PINS;i++)
 44e:	cf 5f       	subi	r28, 0xFF	; 255
 450:	c0 32       	cpi	r28, 0x20	; 32
 452:	a8 f3       	brcs	.-22     	; 0x43e <DIO_Init+0x6>
		{
	 		DIO_InitPin(i,PinsStatusArray[i]);
		}
}
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <DIO_WritePin>:



void DIO_WritePin(DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
	u8 port=pin/PORT_SIZE;
 458:	98 2f       	mov	r25, r24
 45a:	96 95       	lsr	r25
 45c:	96 95       	lsr	r25
 45e:	96 95       	lsr	r25
	u8 pin_num = pin%PORT_SIZE;
 460:	87 70       	andi	r24, 0x07	; 7
	if (volt==HIGH)
 462:	61 30       	cpi	r22, 0x01	; 1
 464:	e1 f5       	brne	.+120    	; 0x4de <DIO_WritePin+0x86>
	{
		switch(port)
 466:	91 30       	cpi	r25, 0x01	; 1
 468:	99 f0       	breq	.+38     	; 0x490 <DIO_WritePin+0x38>
 46a:	28 f0       	brcs	.+10     	; 0x476 <DIO_WritePin+0x1e>
 46c:	92 30       	cpi	r25, 0x02	; 2
 46e:	e9 f0       	breq	.+58     	; 0x4aa <DIO_WritePin+0x52>
 470:	93 30       	cpi	r25, 0x03	; 3
 472:	41 f1       	breq	.+80     	; 0x4c4 <DIO_WritePin+0x6c>
 474:	08 95       	ret
		{
			case PA:
			
			SET_BIT(PORTA,pin_num);
 476:	4b b3       	in	r20, 0x1b	; 27
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	b9 01       	movw	r22, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_WritePin+0x2c>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	8a 95       	dec	r24
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_WritePin+0x28>
 488:	cb 01       	movw	r24, r22
 48a:	84 2b       	or	r24, r20
 48c:	8b bb       	out	0x1b, r24	; 27
			break;
 48e:	08 95       	ret
			case PB:
			
			SET_BIT(PORTB,pin_num);
 490:	48 b3       	in	r20, 0x18	; 24
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_WritePin+0x46>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_WritePin+0x42>
 4a2:	cb 01       	movw	r24, r22
 4a4:	84 2b       	or	r24, r20
 4a6:	88 bb       	out	0x18, r24	; 24
			break;
 4a8:	08 95       	ret
			case PC:
			
			SET_BIT(PORTC,pin_num);
 4aa:	45 b3       	in	r20, 0x15	; 21
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	b9 01       	movw	r22, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_WritePin+0x60>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_WritePin+0x5c>
 4bc:	cb 01       	movw	r24, r22
 4be:	84 2b       	or	r24, r20
 4c0:	85 bb       	out	0x15, r24	; 21
			break;
 4c2:	08 95       	ret
			case PD:
			
			SET_BIT(PORTD,pin_num);
 4c4:	42 b3       	in	r20, 0x12	; 18
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_WritePin+0x7a>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_WritePin+0x76>
 4d6:	cb 01       	movw	r24, r22
 4d8:	84 2b       	or	r24, r20
 4da:	82 bb       	out	0x12, r24	; 18
			break;
 4dc:	08 95       	ret
		}
		
	}
	else if (volt==LOW)
 4de:	61 11       	cpse	r22, r1
 4e0:	3f c0       	rjmp	.+126    	; 0x560 <DIO_WritePin+0x108>
	{
		switch(pin/8)
 4e2:	91 30       	cpi	r25, 0x01	; 1
 4e4:	a1 f0       	breq	.+40     	; 0x50e <DIO_WritePin+0xb6>
 4e6:	28 f0       	brcs	.+10     	; 0x4f2 <DIO_WritePin+0x9a>
 4e8:	92 30       	cpi	r25, 0x02	; 2
 4ea:	f9 f0       	breq	.+62     	; 0x52a <DIO_WritePin+0xd2>
 4ec:	93 30       	cpi	r25, 0x03	; 3
 4ee:	59 f1       	breq	.+86     	; 0x546 <DIO_WritePin+0xee>
 4f0:	08 95       	ret
		{
			case PA:
			
			CLR_BIT(PORTA,pin_num);
 4f2:	4b b3       	in	r20, 0x1b	; 27
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	b9 01       	movw	r22, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_WritePin+0xa8>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	8a 95       	dec	r24
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_WritePin+0xa4>
 504:	cb 01       	movw	r24, r22
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8b bb       	out	0x1b, r24	; 27
			break;
 50c:	08 95       	ret
			case PB:
			
			CLR_BIT(PORTB,pin_num);
 50e:	48 b3       	in	r20, 0x18	; 24
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_WritePin+0xc4>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_WritePin+0xc0>
 520:	cb 01       	movw	r24, r22
 522:	80 95       	com	r24
 524:	84 23       	and	r24, r20
 526:	88 bb       	out	0x18, r24	; 24
			break;
 528:	08 95       	ret
			case PC:
			
			CLR_BIT(PORTC,pin_num);
 52a:	45 b3       	in	r20, 0x15	; 21
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	b9 01       	movw	r22, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_WritePin+0xe0>
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	8a 95       	dec	r24
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_WritePin+0xdc>
 53c:	cb 01       	movw	r24, r22
 53e:	80 95       	com	r24
 540:	84 23       	and	r24, r20
 542:	85 bb       	out	0x15, r24	; 21
			break;
 544:	08 95       	ret
			case PD:
			
			CLR_BIT(PORTD,pin_num);
 546:	42 b3       	in	r20, 0x12	; 18
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	b9 01       	movw	r22, r18
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_WritePin+0xfc>
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	8a 95       	dec	r24
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_WritePin+0xf8>
 558:	cb 01       	movw	r24, r22
 55a:	80 95       	com	r24
 55c:	84 23       	and	r24, r20
 55e:	82 bb       	out	0x12, r24	; 18
 560:	08 95       	ret

00000562 <DIO_ReadPin>:
}


DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
	u8 port=pin/PORT_SIZE;
 562:	98 2f       	mov	r25, r24
 564:	96 95       	lsr	r25
 566:	96 95       	lsr	r25
 568:	96 95       	lsr	r25
	u8 pin_num = pin%PORT_SIZE;
 56a:	48 2f       	mov	r20, r24
 56c:	47 70       	andi	r20, 0x07	; 7
	DIO_PinVoltage_type volt=LOW;
	
	switch(port)
 56e:	91 30       	cpi	r25, 0x01	; 1
 570:	81 f0       	breq	.+32     	; 0x592 <DIO_ReadPin+0x30>
 572:	28 f0       	brcs	.+10     	; 0x57e <DIO_ReadPin+0x1c>
 574:	92 30       	cpi	r25, 0x02	; 2
 576:	b9 f0       	breq	.+46     	; 0x5a6 <DIO_ReadPin+0x44>
 578:	93 30       	cpi	r25, 0x03	; 3
 57a:	f9 f0       	breq	.+62     	; 0x5ba <DIO_ReadPin+0x58>
 57c:	28 c0       	rjmp	.+80     	; 0x5ce <DIO_ReadPin+0x6c>
	{
		case PA:
		
		volt=READ_BIT(PINA,pin_num);
 57e:	99 b3       	in	r25, 0x19	; 25
 580:	89 2f       	mov	r24, r25
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_ReadPin+0x28>
 586:	95 95       	asr	r25
 588:	87 95       	ror	r24
 58a:	4a 95       	dec	r20
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_ReadPin+0x24>
 58e:	81 70       	andi	r24, 0x01	; 1
		break;
 590:	08 95       	ret
		case PB:
		
		volt=READ_BIT(PINB,pin_num);
 592:	26 b3       	in	r18, 0x16	; 22
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	c9 01       	movw	r24, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_ReadPin+0x3c>
 59a:	95 95       	asr	r25
 59c:	87 95       	ror	r24
 59e:	4a 95       	dec	r20
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_ReadPin+0x38>
 5a2:	81 70       	andi	r24, 0x01	; 1
		break;
 5a4:	08 95       	ret
		case PC:
		
		volt=READ_BIT(PINC,pin_num);
 5a6:	23 b3       	in	r18, 0x13	; 19
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	c9 01       	movw	r24, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_ReadPin+0x50>
 5ae:	95 95       	asr	r25
 5b0:	87 95       	ror	r24
 5b2:	4a 95       	dec	r20
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_ReadPin+0x4c>
 5b6:	81 70       	andi	r24, 0x01	; 1
		break;
 5b8:	08 95       	ret
		case PD:
		
		volt=READ_BIT(PIND,pin_num);
 5ba:	20 b3       	in	r18, 0x10	; 16
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	c9 01       	movw	r24, r18
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_ReadPin+0x64>
 5c2:	95 95       	asr	r25
 5c4:	87 95       	ror	r24
 5c6:	4a 95       	dec	r20
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_ReadPin+0x60>
 5ca:	81 70       	andi	r24, 0x01	; 1
		break;
 5cc:	08 95       	ret

DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
	u8 port=pin/PORT_SIZE;
	u8 pin_num = pin%PORT_SIZE;
	DIO_PinVoltage_type volt=LOW;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
		volt=READ_BIT(PIND,pin_num);
		break;
	}
	
	return volt;
}
 5d0:	08 95       	ret

000005d2 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)
{
	u8 port=pin/PORT_SIZE;
 5d2:	98 2f       	mov	r25, r24
 5d4:	96 95       	lsr	r25
 5d6:	96 95       	lsr	r25
 5d8:	96 95       	lsr	r25
	u8 pin_num = pin%PORT_SIZE;
 5da:	87 70       	andi	r24, 0x07	; 7
	switch(port)
 5dc:	91 30       	cpi	r25, 0x01	; 1
 5de:	99 f0       	breq	.+38     	; 0x606 <DIO_TogglePin+0x34>
 5e0:	28 f0       	brcs	.+10     	; 0x5ec <DIO_TogglePin+0x1a>
 5e2:	92 30       	cpi	r25, 0x02	; 2
 5e4:	e9 f0       	breq	.+58     	; 0x620 <DIO_TogglePin+0x4e>
 5e6:	93 30       	cpi	r25, 0x03	; 3
 5e8:	41 f1       	breq	.+80     	; 0x63a <DIO_TogglePin+0x68>
 5ea:	08 95       	ret
	{
		case PA:
		TOG_BIT(PORTA,pin_num);
 5ec:	4b b3       	in	r20, 0x1b	; 27
 5ee:	21 e0       	ldi	r18, 0x01	; 1
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	b9 01       	movw	r22, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_TogglePin+0x28>
 5f6:	66 0f       	add	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	8a 95       	dec	r24
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_TogglePin+0x24>
 5fe:	cb 01       	movw	r24, r22
 600:	84 27       	eor	r24, r20
 602:	8b bb       	out	0x1b, r24	; 27
		break;
 604:	08 95       	ret
		
		case PB:
		TOG_BIT(PORTB,pin_num);
 606:	48 b3       	in	r20, 0x18	; 24
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	b9 01       	movw	r22, r18
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_TogglePin+0x42>
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	8a 95       	dec	r24
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_TogglePin+0x3e>
 618:	cb 01       	movw	r24, r22
 61a:	84 27       	eor	r24, r20
 61c:	88 bb       	out	0x18, r24	; 24
		break;
 61e:	08 95       	ret
		
		case PC:
		TOG_BIT(PORTC,pin_num);
 620:	45 b3       	in	r20, 0x15	; 21
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	b9 01       	movw	r22, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_TogglePin+0x5c>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_TogglePin+0x58>
 632:	cb 01       	movw	r24, r22
 634:	84 27       	eor	r24, r20
 636:	85 bb       	out	0x15, r24	; 21
		break;
 638:	08 95       	ret
		 
		case PD:
		TOG_BIT(PORTD,pin_num);
 63a:	42 b3       	in	r20, 0x12	; 18
 63c:	21 e0       	ldi	r18, 0x01	; 1
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	b9 01       	movw	r22, r18
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_TogglePin+0x76>
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	8a 95       	dec	r24
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_TogglePin+0x72>
 64c:	cb 01       	movw	r24, r22
 64e:	84 27       	eor	r24, r20
 650:	82 bb       	out	0x12, r24	; 18
 652:	08 95       	ret

00000654 <DIO_WritePort>:
	}
}

void DIO_WritePort(DIO_Port_type port,u8 value)
{
	switch(port)
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	41 f0       	breq	.+16     	; 0x668 <DIO_WritePort+0x14>
 658:	28 f0       	brcs	.+10     	; 0x664 <DIO_WritePort+0x10>
 65a:	82 30       	cpi	r24, 0x02	; 2
 65c:	39 f0       	breq	.+14     	; 0x66c <DIO_WritePort+0x18>
 65e:	83 30       	cpi	r24, 0x03	; 3
 660:	39 f0       	breq	.+14     	; 0x670 <DIO_WritePort+0x1c>
 662:	08 95       	ret
	{
		case PA:
		PORTA=value;
 664:	6b bb       	out	0x1b, r22	; 27
		break;
 666:	08 95       	ret
		case PB:
		PORTB=value;
 668:	68 bb       	out	0x18, r22	; 24
		break;
 66a:	08 95       	ret
		case PC:
		PORTC=value;
 66c:	65 bb       	out	0x15, r22	; 21
		break;
 66e:	08 95       	ret
		case PD:
		PORTD=value;
 670:	62 bb       	out	0x12, r22	; 18
 672:	08 95       	ret

00000674 <TIMER0_Init>:
{
	TIMER1[OCB_FPTR]=LocalFptr;
}
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
	TIMER1[ICU_FPTR]=LocalFptr;
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	69 f0       	breq	.+26     	; 0x692 <TIMER0_Init+0x1e>
 678:	28 f0       	brcs	.+10     	; 0x684 <TIMER0_Init+0x10>
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	89 f0       	breq	.+34     	; 0x6a0 <TIMER0_Init+0x2c>
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	b1 f0       	breq	.+44     	; 0x6ae <TIMER0_Init+0x3a>
 682:	1b c0       	rjmp	.+54     	; 0x6ba <TIMER0_Init+0x46>
 684:	83 b7       	in	r24, 0x33	; 51
 686:	8f 7b       	andi	r24, 0xBF	; 191
 688:	83 bf       	out	0x33, r24	; 51
 68a:	83 b7       	in	r24, 0x33	; 51
 68c:	87 7f       	andi	r24, 0xF7	; 247
 68e:	83 bf       	out	0x33, r24	; 51
 690:	14 c0       	rjmp	.+40     	; 0x6ba <TIMER0_Init+0x46>
 692:	83 b7       	in	r24, 0x33	; 51
 694:	80 64       	ori	r24, 0x40	; 64
 696:	83 bf       	out	0x33, r24	; 51
 698:	83 b7       	in	r24, 0x33	; 51
 69a:	87 7f       	andi	r24, 0xF7	; 247
 69c:	83 bf       	out	0x33, r24	; 51
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <TIMER0_Init+0x46>
 6a0:	83 b7       	in	r24, 0x33	; 51
 6a2:	8f 7b       	andi	r24, 0xBF	; 191
 6a4:	83 bf       	out	0x33, r24	; 51
 6a6:	83 b7       	in	r24, 0x33	; 51
 6a8:	88 60       	ori	r24, 0x08	; 8
 6aa:	83 bf       	out	0x33, r24	; 51
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <TIMER0_Init+0x46>
 6ae:	83 b7       	in	r24, 0x33	; 51
 6b0:	80 64       	ori	r24, 0x40	; 64
 6b2:	83 bf       	out	0x33, r24	; 51
 6b4:	83 b7       	in	r24, 0x33	; 51
 6b6:	88 60       	ori	r24, 0x08	; 8
 6b8:	83 bf       	out	0x33, r24	; 51
 6ba:	83 b7       	in	r24, 0x33	; 51
 6bc:	88 7f       	andi	r24, 0xF8	; 248
 6be:	83 bf       	out	0x33, r24	; 51
 6c0:	83 b7       	in	r24, 0x33	; 51
 6c2:	68 2b       	or	r22, r24
 6c4:	63 bf       	out	0x33, r22	; 51
 6c6:	08 95       	ret

000006c8 <TIMER0_OV_InterruptEnable>:
 6c8:	89 b7       	in	r24, 0x39	; 57
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	89 bf       	out	0x39, r24	; 57
 6ce:	08 95       	ret

000006d0 <TIMER0_OV_SetCallBack>:
 6d0:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <TIMER0_ISR+0x1>
 6d4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <TIMER0_ISR>
 6d8:	08 95       	ret

000006da <__vector_11>:
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
 6e4:	2f 93       	push	r18
 6e6:	3f 93       	push	r19
 6e8:	4f 93       	push	r20
 6ea:	5f 93       	push	r21
 6ec:	6f 93       	push	r22
 6ee:	7f 93       	push	r23
 6f0:	8f 93       	push	r24
 6f2:	9f 93       	push	r25
 6f4:	af 93       	push	r26
 6f6:	bf 93       	push	r27
 6f8:	ef 93       	push	r30
 6fa:	ff 93       	push	r31
 6fc:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <TIMER0_ISR>
 700:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <TIMER0_ISR+0x1>
 704:	30 97       	sbiw	r30, 0x00	; 0
 706:	09 f0       	breq	.+2      	; 0x70a <__vector_11+0x30>
 708:	09 95       	icall
 70a:	ff 91       	pop	r31
 70c:	ef 91       	pop	r30
 70e:	bf 91       	pop	r27
 710:	af 91       	pop	r26
 712:	9f 91       	pop	r25
 714:	8f 91       	pop	r24
 716:	7f 91       	pop	r23
 718:	6f 91       	pop	r22
 71a:	5f 91       	pop	r21
 71c:	4f 91       	pop	r20
 71e:	3f 91       	pop	r19
 720:	2f 91       	pop	r18
 722:	0f 90       	pop	r0
 724:	0f be       	out	0x3f, r0	; 63
 726:	0f 90       	pop	r0
 728:	1f 90       	pop	r1
 72a:	18 95       	reti

0000072c <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
 72c:	1f 92       	push	r1
 72e:	0f 92       	push	r0
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	0f 92       	push	r0
 734:	11 24       	eor	r1, r1
 736:	2f 93       	push	r18
 738:	3f 93       	push	r19
 73a:	4f 93       	push	r20
 73c:	5f 93       	push	r21
 73e:	6f 93       	push	r22
 740:	7f 93       	push	r23
 742:	8f 93       	push	r24
 744:	9f 93       	push	r25
 746:	af 93       	push	r26
 748:	bf 93       	push	r27
 74a:	ef 93       	push	r30
 74c:	ff 93       	push	r31
	if(TIMER1[OVF_FPTR]!=NULLPTR)
 74e:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <TIMER1>
 752:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <TIMER1+0x1>
 756:	30 97       	sbiw	r30, 0x00	; 0
 758:	09 f0       	breq	.+2      	; 0x75c <__vector_9+0x30>
	{
		TIMER1[OVF_FPTR]();
 75a:	09 95       	icall
	}
}
 75c:	ff 91       	pop	r31
 75e:	ef 91       	pop	r30
 760:	bf 91       	pop	r27
 762:	af 91       	pop	r26
 764:	9f 91       	pop	r25
 766:	8f 91       	pop	r24
 768:	7f 91       	pop	r23
 76a:	6f 91       	pop	r22
 76c:	5f 91       	pop	r21
 76e:	4f 91       	pop	r20
 770:	3f 91       	pop	r19
 772:	2f 91       	pop	r18
 774:	0f 90       	pop	r0
 776:	0f be       	out	0x3f, r0	; 63
 778:	0f 90       	pop	r0
 77a:	1f 90       	pop	r1
 77c:	18 95       	reti

0000077e <__vector_7>:
ISR(TIMER1_OCA_vect)
{
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	2f 93       	push	r18
 78a:	3f 93       	push	r19
 78c:	4f 93       	push	r20
 78e:	5f 93       	push	r21
 790:	6f 93       	push	r22
 792:	7f 93       	push	r23
 794:	8f 93       	push	r24
 796:	9f 93       	push	r25
 798:	af 93       	push	r26
 79a:	bf 93       	push	r27
 79c:	ef 93       	push	r30
 79e:	ff 93       	push	r31
	if(TIMER1[OCA_FPTR]!=NULLPTR)
 7a0:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <TIMER1+0x2>
 7a4:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <TIMER1+0x3>
 7a8:	30 97       	sbiw	r30, 0x00	; 0
 7aa:	09 f0       	breq	.+2      	; 0x7ae <__vector_7+0x30>
	{
		TIMER1[OCA_FPTR]();
 7ac:	09 95       	icall
	}
}
 7ae:	ff 91       	pop	r31
 7b0:	ef 91       	pop	r30
 7b2:	bf 91       	pop	r27
 7b4:	af 91       	pop	r26
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	7f 91       	pop	r23
 7bc:	6f 91       	pop	r22
 7be:	5f 91       	pop	r21
 7c0:	4f 91       	pop	r20
 7c2:	3f 91       	pop	r19
 7c4:	2f 91       	pop	r18
 7c6:	0f 90       	pop	r0
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	0f 90       	pop	r0
 7cc:	1f 90       	pop	r1
 7ce:	18 95       	reti

000007d0 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
 7da:	2f 93       	push	r18
 7dc:	3f 93       	push	r19
 7de:	4f 93       	push	r20
 7e0:	5f 93       	push	r21
 7e2:	6f 93       	push	r22
 7e4:	7f 93       	push	r23
 7e6:	8f 93       	push	r24
 7e8:	9f 93       	push	r25
 7ea:	af 93       	push	r26
 7ec:	bf 93       	push	r27
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31
	if(TIMER1[OCB_FPTR]!=NULLPTR)
 7f2:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <TIMER1+0x4>
 7f6:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <TIMER1+0x5>
 7fa:	30 97       	sbiw	r30, 0x00	; 0
 7fc:	09 f0       	breq	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
	{
		TIMER1[OCB_FPTR]();
 7fe:	09 95       	icall
	}
}
 800:	ff 91       	pop	r31
 802:	ef 91       	pop	r30
 804:	bf 91       	pop	r27
 806:	af 91       	pop	r26
 808:	9f 91       	pop	r25
 80a:	8f 91       	pop	r24
 80c:	7f 91       	pop	r23
 80e:	6f 91       	pop	r22
 810:	5f 91       	pop	r21
 812:	4f 91       	pop	r20
 814:	3f 91       	pop	r19
 816:	2f 91       	pop	r18
 818:	0f 90       	pop	r0
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	0f 90       	pop	r0
 81e:	1f 90       	pop	r1
 820:	18 95       	reti

00000822 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
 822:	1f 92       	push	r1
 824:	0f 92       	push	r0
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	0f 92       	push	r0
 82a:	11 24       	eor	r1, r1
 82c:	2f 93       	push	r18
 82e:	3f 93       	push	r19
 830:	4f 93       	push	r20
 832:	5f 93       	push	r21
 834:	6f 93       	push	r22
 836:	7f 93       	push	r23
 838:	8f 93       	push	r24
 83a:	9f 93       	push	r25
 83c:	af 93       	push	r26
 83e:	bf 93       	push	r27
 840:	ef 93       	push	r30
 842:	ff 93       	push	r31
	if(TIMER1[ICU_FPTR]!=NULLPTR)
 844:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <TIMER1+0x6>
 848:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <TIMER1+0x7>
 84c:	30 97       	sbiw	r30, 0x00	; 0
 84e:	09 f0       	breq	.+2      	; 0x852 <__vector_6+0x30>
	{
		TIMER1[ICU_FPTR]();
 850:	09 95       	icall
	}
}
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	bf 91       	pop	r27
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <mode_update>:
#include "mode.h"
static mode_t state =RUN;

void mode_update(void) // check mode every period
{
	if(buttons_getter(BUTTON_MODE) == PRESSED)
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	0e 94 5f 00 	call	0xbe	; 0xbe <buttons_getter>
 87a:	81 11       	cpse	r24, r1
 87c:	15 c0       	rjmp	.+42     	; 0x8a8 <mode_update+0x34>
	{
		DIO_TogglePin(PIND7);
 87e:	8f e1       	ldi	r24, 0x1F	; 31
 880:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <DIO_TogglePin>
		switch(state)
 884:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <state>
 888:	81 30       	cpi	r24, 0x01	; 1
 88a:	41 f0       	breq	.+16     	; 0x89c <mode_update+0x28>
 88c:	18 f0       	brcs	.+6      	; 0x894 <mode_update+0x20>
 88e:	82 30       	cpi	r24, 0x02	; 2
 890:	49 f0       	breq	.+18     	; 0x8a4 <mode_update+0x30>
 892:	08 95       	ret
		{
			case RUN : state = CONFIG_SEC;
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state>
						break;
 89a:	08 95       	ret
			case CONFIG_SEC : state = CONFIG_MIN;
 89c:	82 e0       	ldi	r24, 0x02	; 2
 89e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <state>
						break;
 8a2:	08 95       	ret
			case CONFIG_MIN : state = RUN;
 8a4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <state>
 8a8:	08 95       	ret

000008aa <mode_getter>:
}

mode_t mode_getter(void)
{
	return state;
 8aa:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <state>
 8ae:	08 95       	ret

000008b0 <update_tick>:
	}
}

void update_tick(void)
{
	sch_flag++;
 8b0:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <sch_flag>
 8b4:	8f 5f       	subi	r24, 0xFF	; 255
 8b6:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <sch_flag>
	ticks++;
 8ba:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <ticks>
 8be:	8f 5f       	subi	r24, 0xFF	; 255
 8c0:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <ticks>
	TIMER0 = TICK_TIME; // to get 1000us -> 1ms
 8c4:	8d e7       	ldi	r24, 0x7D	; 125
 8c6:	82 bf       	out	0x32, r24	; 50
 8c8:	08 95       	ret

000008ca <time_update>:

void time_update(void)
{
	
	static u16 tick_counter = 0;
	tick_counter++;
 8ca:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <tick_counter.2053>
 8ce:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <tick_counter.2053+0x1>
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <tick_counter.2053+0x1>
 8d8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <tick_counter.2053>
	if (tick_counter == SEC_TICKS)
 8dc:	8d 3c       	cpi	r24, 0xCD	; 205
 8de:	92 40       	sbci	r25, 0x02	; 2
 8e0:	d9 f4       	brne	.+54     	; 0x918 <time_update+0x4e>
	{	
		time_setter(++second,minute);
 8e2:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <minute>
 8e6:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <second>
 8ea:	8f 5f       	subi	r24, 0xFF	; 255
 8ec:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <second>
 8f0:	0e 94 07 01 	call	0x20e	; 0x20e <time_setter>
		if (second == MIN_SECS)
 8f4:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <second>
 8f8:	8c 33       	cpi	r24, 0x3C	; 60
 8fa:	51 f4       	brne	.+20     	; 0x910 <time_update+0x46>
		{
			second =0;
 8fc:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <second>
			time_setter(second,++minute);
 900:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <minute>
 904:	6f 5f       	subi	r22, 0xFF	; 255
 906:	60 93 d2 00 	sts	0x00D2, r22	; 0x8000d2 <minute>
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	0e 94 07 01 	call	0x20e	; 0x20e <time_setter>
		}
		tick_counter = 0;
 910:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <tick_counter.2053+0x1>
 914:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <tick_counter.2053>
 918:	08 95       	ret

0000091a <time_setting>:
	}
}

void time_setting(void)
{
	if(mode_getter() == CONFIG_SEC)
 91a:	0e 94 55 04 	call	0x8aa	; 0x8aa <mode_getter>
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	b9 f4       	brne	.+46     	; 0x950 <time_setting+0x36>
	{
		second+=!buttons_getter(BUTTON_PLUSE);
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	0e 94 5f 00 	call	0xbe	; 0xbe <buttons_getter>
 928:	91 e0       	ldi	r25, 0x01	; 1
 92a:	81 11       	cpse	r24, r1
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <second>
 932:	98 0f       	add	r25, r24
 934:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <second>
		second-=!buttons_getter(BUTTON_MINUS);
 938:	82 e0       	ldi	r24, 0x02	; 2
 93a:	0e 94 5f 00 	call	0xbe	; 0xbe <buttons_getter>
 93e:	91 e0       	ldi	r25, 0x01	; 1
 940:	81 11       	cpse	r24, r1
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <second>
 948:	89 1b       	sub	r24, r25
 94a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <second>
 94e:	1a c0       	rjmp	.+52     	; 0x984 <time_setting+0x6a>
	}
	else if(mode_getter() == CONFIG_MIN)
 950:	0e 94 55 04 	call	0x8aa	; 0x8aa <mode_getter>
 954:	82 30       	cpi	r24, 0x02	; 2
 956:	b1 f4       	brne	.+44     	; 0x984 <time_setting+0x6a>
	{
		minute+=!buttons_getter(BUTTON_PLUSE);
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	0e 94 5f 00 	call	0xbe	; 0xbe <buttons_getter>
 95e:	91 e0       	ldi	r25, 0x01	; 1
 960:	81 11       	cpse	r24, r1
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <minute>
 968:	98 0f       	add	r25, r24
 96a:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <minute>
		minute-=!buttons_getter(BUTTON_MINUS);
 96e:	82 e0       	ldi	r24, 0x02	; 2
 970:	0e 94 5f 00 	call	0xbe	; 0xbe <buttons_getter>
 974:	91 e0       	ldi	r25, 0x01	; 1
 976:	81 11       	cpse	r24, r1
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <minute>
 97e:	89 1b       	sub	r24, r25
 980:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <minute>
	}
	if (second >= MIN_SECS)
 984:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <second>
 988:	8c 33       	cpi	r24, 0x3C	; 60
 98a:	1c f0       	brlt	.+6      	; 0x992 <time_setting+0x78>
	{
		second = 0;
 98c:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <second>
 990:	05 c0       	rjmp	.+10     	; 0x99c <time_setting+0x82>
		
	}
	else if (second < 0)
 992:	88 23       	and	r24, r24
 994:	1c f4       	brge	.+6      	; 0x99c <time_setting+0x82>
	{
		second = TIME_OVF;
 996:	8b e3       	ldi	r24, 0x3B	; 59
 998:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <second>
	}
	
	if (minute >= HOUR_MINS )
 99c:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <minute>
 9a0:	8c 33       	cpi	r24, 0x3C	; 60
 9a2:	1c f0       	brlt	.+6      	; 0x9aa <time_setting+0x90>
	{
		minute = 0;
 9a4:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <minute>
 9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <time_setting+0x9a>
		
	}
	else if (minute < 0)
 9aa:	88 23       	and	r24, r24
 9ac:	1c f4       	brge	.+6      	; 0x9b4 <time_setting+0x9a>
	{
		minute = TIME_OVF;
 9ae:	8b e3       	ldi	r24, 0x3B	; 59
 9b0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <minute>
	}
	time_setter(second,minute);
 9b4:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <minute>
 9b8:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <second>
 9bc:	0e 94 07 01 	call	0x20e	; 0x20e <time_setter>
 9c0:	08 95       	ret

000009c2 <schaduler_init>:
static const void (*task_array[TASK_MAX])(void)  = {time_update,time_setting,button_periodic_check,mode_update,display_time};
static const u8 task_period [TASK_MAX] = {PERIOD_TIME,PERIOD_SETTING,PERIOD_BUTTON,PERIOD_MODE,PERIOD_DISPLAY};
	
void schaduler_init(void)
{
	for(int i=0 ; i<TASK_MAX ; i++)
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	1a c0       	rjmp	.+52     	; 0x9fc <schaduler_init+0x3a>
	{
		tasks[i].task = task_array[i];
 9c8:	fc 01       	movw	r30, r24
 9ca:	ee 0f       	add	r30, r30
 9cc:	ff 1f       	adc	r31, r31
 9ce:	eb 56       	subi	r30, 0x6B	; 107
 9d0:	ff 4f       	sbci	r31, 0xFF	; 255
 9d2:	20 81       	ld	r18, Z
 9d4:	31 81       	ldd	r19, Z+1	; 0x01
 9d6:	fc 01       	movw	r30, r24
 9d8:	ee 0f       	add	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	ee 0f       	add	r30, r30
 9de:	ff 1f       	adc	r31, r31
 9e0:	e8 0f       	add	r30, r24
 9e2:	f9 1f       	adc	r31, r25
 9e4:	ea 54       	subi	r30, 0x4A	; 74
 9e6:	ff 4f       	sbci	r31, 0xFF	; 255
 9e8:	31 83       	std	Z+1, r19	; 0x01
 9ea:	20 83       	st	Z, r18
		tasks[i].period = task_period[i];
 9ec:	dc 01       	movw	r26, r24
 9ee:	a0 57       	subi	r26, 0x70	; 112
 9f0:	bf 4f       	sbci	r27, 0xFF	; 255
 9f2:	2c 91       	ld	r18, X
 9f4:	22 83       	std	Z+2, r18	; 0x02
		tasks[i].ticks = 0;
 9f6:	13 82       	std	Z+3, r1	; 0x03
		tasks[i].ready_flag = FLAG_LOW;
 9f8:	14 82       	std	Z+4, r1	; 0x04
static const void (*task_array[TASK_MAX])(void)  = {time_update,time_setting,button_periodic_check,mode_update,display_time};
static const u8 task_period [TASK_MAX] = {PERIOD_TIME,PERIOD_SETTING,PERIOD_BUTTON,PERIOD_MODE,PERIOD_DISPLAY};
	
void schaduler_init(void)
{
	for(int i=0 ; i<TASK_MAX ; i++)
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	85 30       	cpi	r24, 0x05	; 5
 9fe:	91 05       	cpc	r25, r1
 a00:	1c f3       	brlt	.-58     	; 0x9c8 <schaduler_init+0x6>
		tasks[i].task = task_array[i];
		tasks[i].period = task_period[i];
		tasks[i].ticks = 0;
		tasks[i].ready_flag = FLAG_LOW;
	}
	TIMER0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_64);
 a02:	63 e0       	ldi	r22, 0x03	; 3
 a04:	80 e0       	ldi	r24, 0x00	; 0
 a06:	0e 94 3a 03 	call	0x674	; 0x674 <TIMER0_Init>
	TIMER0_OV_SetCallBack(update_tick);
 a0a:	88 e5       	ldi	r24, 0x58	; 88
 a0c:	94 e0       	ldi	r25, 0x04	; 4
 a0e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <TIMER0_OV_SetCallBack>
	sei();
 a12:	78 94       	sei
	TIMER0_OV_InterruptEnable();
 a14:	0e 94 64 03 	call	0x6c8	; 0x6c8 <TIMER0_OV_InterruptEnable>
 a18:	08 95       	ret

00000a1a <schaduler_update>:
}
void schaduler_update(void)
{
 a1a:	cf 93       	push	r28
		for (u8 i = 0; i<TASK_MAX ; i++)
 a1c:	c0 e0       	ldi	r28, 0x00	; 0
 a1e:	2b c0       	rjmp	.+86     	; 0xa76 <schaduler_update+0x5c>
		{
			// for converting the mode
			if (mode_getter() && i== 0)
 a20:	0e 94 55 04 	call	0x8aa	; 0x8aa <mode_getter>
 a24:	88 23       	and	r24, r24
 a26:	11 f0       	breq	.+4      	; 0xa2c <schaduler_update+0x12>
 a28:	cc 23       	and	r28, r28
 a2a:	19 f0       	breq	.+6      	; 0xa32 <schaduler_update+0x18>
			{
				i = 1;
			}
			else if (i == 1)
 a2c:	c1 30       	cpi	r28, 0x01	; 1
 a2e:	21 f4       	brne	.+8      	; 0xa38 <schaduler_update+0x1e>
 a30:	02 c0       	rjmp	.+4      	; 0xa36 <schaduler_update+0x1c>
		for (u8 i = 0; i<TASK_MAX ; i++)
		{
			// for converting the mode
			if (mode_getter() && i== 0)
			{
				i = 1;
 a32:	c1 e0       	ldi	r28, 0x01	; 1
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <schaduler_update+0x1e>
			}
			else if (i == 1)
			{
				i = 2;
 a36:	c2 e0       	ldi	r28, 0x02	; 2
			}
			/**************************/
			tasks[i].ticks++;
 a38:	2c 2f       	mov	r18, r28
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	f9 01       	movw	r30, r18
 a3e:	ee 0f       	add	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	ee 0f       	add	r30, r30
 a44:	ff 1f       	adc	r31, r31
 a46:	e2 0f       	add	r30, r18
 a48:	f3 1f       	adc	r31, r19
 a4a:	ea 54       	subi	r30, 0x4A	; 74
 a4c:	ff 4f       	sbci	r31, 0xFF	; 255
 a4e:	83 81       	ldd	r24, Z+3	; 0x03
 a50:	8f 5f       	subi	r24, 0xFF	; 255
 a52:	83 83       	std	Z+3, r24	; 0x03
			if(tasks[i].ticks == tasks[i].period)
 a54:	92 81       	ldd	r25, Z+2	; 0x02
 a56:	89 13       	cpse	r24, r25
 a58:	0d c0       	rjmp	.+26     	; 0xa74 <schaduler_update+0x5a>
			{
				tasks[i].ready_flag = FLAG_HIGH;
 a5a:	f9 01       	movw	r30, r18
 a5c:	ee 0f       	add	r30, r30
 a5e:	ff 1f       	adc	r31, r31
 a60:	ee 0f       	add	r30, r30
 a62:	ff 1f       	adc	r31, r31
 a64:	2e 0f       	add	r18, r30
 a66:	3f 1f       	adc	r19, r31
 a68:	f9 01       	movw	r30, r18
 a6a:	ea 54       	subi	r30, 0x4A	; 74
 a6c:	ff 4f       	sbci	r31, 0xFF	; 255
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	84 83       	std	Z+4, r24	; 0x04
				tasks[i].ticks = 0;
 a72:	13 82       	std	Z+3, r1	; 0x03
	sei();
	TIMER0_OV_InterruptEnable();
}
void schaduler_update(void)
{
		for (u8 i = 0; i<TASK_MAX ; i++)
 a74:	cf 5f       	subi	r28, 0xFF	; 255
 a76:	c5 30       	cpi	r28, 0x05	; 5
 a78:	98 f2       	brcs	.-90     	; 0xa20 <schaduler_update+0x6>
			{
				tasks[i].ready_flag = FLAG_HIGH;
				tasks[i].ticks = 0;
			}
		}		
}
 a7a:	cf 91       	pop	r28
 a7c:	08 95       	ret

00000a7e <despatcher>:

void despatcher (void)
{
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
	for (int i = 0 ; i<TASK_MAX ; i++)
 a82:	c0 e0       	ldi	r28, 0x00	; 0
 a84:	d0 e0       	ldi	r29, 0x00	; 0
 a86:	1b c0       	rjmp	.+54     	; 0xabe <despatcher+0x40>
	{
		if(FLAG_HIGH == tasks[i].ready_flag)
 a88:	fe 01       	movw	r30, r28
 a8a:	ee 0f       	add	r30, r30
 a8c:	ff 1f       	adc	r31, r31
 a8e:	ee 0f       	add	r30, r30
 a90:	ff 1f       	adc	r31, r31
 a92:	ec 0f       	add	r30, r28
 a94:	fd 1f       	adc	r31, r29
 a96:	ea 54       	subi	r30, 0x4A	; 74
 a98:	ff 4f       	sbci	r31, 0xFF	; 255
 a9a:	84 81       	ldd	r24, Z+4	; 0x04
 a9c:	81 30       	cpi	r24, 0x01	; 1
 a9e:	71 f4       	brne	.+28     	; 0xabc <despatcher+0x3e>
		{
			tasks[i].ready_flag = FLAG_LOW;
 aa0:	fe 01       	movw	r30, r28
 aa2:	ee 0f       	add	r30, r30
 aa4:	ff 1f       	adc	r31, r31
 aa6:	ee 0f       	add	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	ec 0f       	add	r30, r28
 aac:	fd 1f       	adc	r31, r29
 aae:	ea 54       	subi	r30, 0x4A	; 74
 ab0:	ff 4f       	sbci	r31, 0xFF	; 255
 ab2:	14 82       	std	Z+4, r1	; 0x04
			tasks[i].task();
 ab4:	01 90       	ld	r0, Z+
 ab6:	f0 81       	ld	r31, Z
 ab8:	e0 2d       	mov	r30, r0
 aba:	09 95       	icall
		}		
}

void despatcher (void)
{
	for (int i = 0 ; i<TASK_MAX ; i++)
 abc:	21 96       	adiw	r28, 0x01	; 1
 abe:	c5 30       	cpi	r28, 0x05	; 5
 ac0:	d1 05       	cpc	r29, r1
 ac2:	14 f3       	brlt	.-60     	; 0xa88 <despatcher+0xa>
		{
			tasks[i].ready_flag = FLAG_LOW;
			tasks[i].task();
		}
	}
}
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	08 95       	ret

00000aca <OS_run>:

void OS_run(void)
{
	if(sch_flag == FLAG_HIGH)
 aca:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <sch_flag>
 ace:	81 30       	cpi	r24, 0x01	; 1
 ad0:	21 f4       	brne	.+8      	; 0xada <OS_run+0x10>
	{
		schaduler_update();
 ad2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <schaduler_update>
		sch_flag = FLAG_LOW;
 ad6:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <sch_flag>
	}
	
	despatcher();
 ada:	0e 94 3f 05 	call	0xa7e	; 0xa7e <despatcher>
	
	if(ticks == 20)
 ade:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <ticks>
 ae2:	84 31       	cpi	r24, 0x14	; 20
 ae4:	11 f4       	brne	.+4      	; 0xaea <OS_run+0x20>
	{
		ticks = 0;
 ae6:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <ticks>
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
